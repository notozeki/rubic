#!/usr/bin/env ruby

require 'rubic'
require 'rubic/inspector'
require 'readline'
require 'optparse'

using Rubic::Inspector

def error(str)
  $stderr.puts "\e[31m#{str}\e[0m"
end


rubic = Rubic::Interpreter.new

opts = OptionParser.new
opts.version = Rubic::VERSION
opts.on('-r FILE', 'load FILE at startup') do |file|
  File.open(file) do |f|
    begin
      rubic.evaluate(f.read)
    rescue Rubic::RubicError => e
      error "Error: #{e.message}"
      exit false
    end
  end
end
opts.parse!(ARGV)

if ARGV.size == 1
  file = ARGV.shift
  File.open(file) do |f|
    begin
      rubic.evaluate(f.read)
    rescue Rubic::RubicError => e
      error "Error: #{e.message}"
      exit false
    end
  end
else
  # REPL mode

  puts "Welcome to interactive Rubic (v#{Rubic::VERSION})"
  puts 'Hit ^D to exit'

  while input = Readline.readline(">> ", true)
    next if input.empty?
    while input.count('(') > input.count(')')
      input << Readline.readline(' | ', true)
    end

    begin
      puts '=> ' + rubic.evaluate(input).inspect
    rescue Rubic::RubicError => e
      error "Error: #{e.message}"
    end
  end
end
