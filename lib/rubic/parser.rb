#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'strscan'

module Rubic

class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 120)
EOT = [false, nil] # end of token
SYM_CHARS = Regexp.escape("+-*/<>=?")

def parse(str)
  @s = StringScanner.new(str)
  do_parse
end

def next_token
  @s.skip(/\s+/)
  return EOT if @s.eos?

  case
  when @s.scan(/[0-9]+(\.[0-9]+)?/)
    [:NUMBER, @s[0].include?('.') ? @s[0].to_f : @s[0].to_i]
  when @s.scan(/[\(\)]/o)
    [@s[0], nil]
  when @s.scan(/[A-Za-z_#{SYM_CHARS}][A-Za-z0-9_#{SYM_CHARS}]*/o)
    case @s[0] # keyword check
    when 'define'
      [:KW_DEFINE, nil]
    when 'cond'
      [:KW_COND, nil]
    when 'else'
      [:KW_ELSE, nil]
    when 'if'
      [:KW_IF, nil]
    when 'and'
      [:KW_AND, nil]
    when 'or'
      [:KW_OR, nil]
    when 'lambda'
      [:KW_LAMBDA, nil]
    when 'let'
      [:KW_LET, nil]
    else
      [:IDENT, @s[0].to_sym]
    end
  when @s.scan(/"([^"]*)"/)
    [:STRING, @s[1]]
  else
    raise Rubic::ParseError, "unknown character #{@s.getch}"
  end
end

def on_error(t, val, vstack)
  raise Rubic::ParseError, "parse error near #{token_to_str(t)}"
end

...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     2,    13,    38,    14,     3,     4,     5,    16,    17,     2,
    18,    19,    20,     3,     4,     5,     2,    58,    44,     2,
     3,     4,     5,     3,     4,     5,     2,    59,    60,     2,
     3,     4,     5,     3,     4,     5,     2,    57,    40,    53,
     3,     4,     5,     2,    31,    66,    41,     3,     4,     5,
     2,    34,    65,     2,     3,     4,     5,     3,     4,     5,
     2,    63,    33,     2,     3,     4,     5,     3,     4,     5,
     2,    54,    35,    53,     3,     4,     5,     2,    31,    37,
     2,     3,     4,     5,     3,     4,     5,     2,    48,    21,
     2,     3,     4,     5,     3,     4,     5,     2,    12,    69,
     2,     3,     4,     5,     3,     4,     5,     2,   nil,    68,
     2,     3,     4,     5,     3,     4,     5,     2,   nil,   nil,
    28,     3,     4,     5,    27,    56,   nil,    55 ]

racc_action_check = [
     2,     2,    25,     2,     2,     2,     2,     2,     2,    31,
     2,     2,     2,    31,    31,    31,    57,    50,    31,    63,
    57,    57,    57,    63,    63,    63,    13,    51,    52,    14,
    13,    13,    13,    14,    14,    14,    15,    49,    28,    49,
    15,    15,    15,    62,    29,    62,    29,    62,    62,    62,
    61,    20,    61,    18,    61,    61,    61,    18,    18,    18,
     0,    56,    19,    55,     0,     0,     0,    55,    55,    55,
    22,    46,    22,    46,    22,    22,    22,    24,    17,    24,
    54,    24,    24,    24,    54,    54,    54,    26,    39,    12,
    27,    26,    26,    26,    27,    27,    27,    45,     1,    67,
    44,    45,    45,    45,    44,    44,    44,    64,   nil,    64,
    43,    64,    64,    64,    43,    43,    43,    32,   nil,   nil,
    16,    32,    32,    32,    16,    47,   nil,    47 ]

racc_action_pointer = [
    58,    98,    -2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    89,    24,    27,    34,   118,    76,    51,    60,
    49,   nil,    68,   nil,    75,    -2,    85,    88,    32,    42,
   nil,     7,   115,   nil,   nil,   nil,   nil,   nil,   nil,    84,
   nil,   nil,   nil,   108,    98,    95,    67,   123,   nil,    33,
    13,    23,    24,   nil,    78,    61,    55,    14,   nil,   nil,
   nil,    48,    41,    17,   105,   nil,   nil,    95,   nil,   nil ]

racc_action_default = [
   -31,   -31,   -31,    -4,    -5,    -6,    -7,    -8,    -9,   -10,
   -11,   -12,   -31,   -31,   -31,   -15,   -31,   -31,   -31,   -31,
   -31,    70,   -31,   -13,   -31,   -31,   -16,   -31,   -31,   -31,
   -22,   -31,   -31,   -19,   -29,    -1,   -14,    -2,    -3,   -31,
   -19,   -21,   -23,   -31,   -31,   -31,   -31,   -31,   -17,   -31,
   -31,   -31,   -31,   -20,   -31,   -31,   -31,   -31,   -24,   -25,
   -26,   -31,   -31,   -31,   -31,   -27,   -28,   -31,   -18,   -30 ]

racc_goto_table = [
     1,    30,    15,    46,    29,    22,    24,    26,    25,    47,
    49,   nil,   nil,    42,   nil,   nil,   nil,   nil,    32,   nil,
   nil,   nil,    36,   nil,    36,   nil,    36,    39,   nil,   nil,
   nil,    43,    45,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    50,    51,    52,    61,    62,   nil,    64,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    36,    36,    67,    36 ]

racc_goto_check = [
     1,    12,     1,    10,    11,     2,     2,     2,     3,    13,
    10,   nil,   nil,    12,   nil,   nil,   nil,   nil,     1,   nil,
   nil,   nil,     1,   nil,     1,   nil,     1,     1,   nil,   nil,
   nil,     1,     1,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     1,     1,     1,     2,     2,   nil,     2,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     1,     1,     1,     1 ]

racc_goto_pointer = [
   nil,     0,    -8,    -7,   nil,   nil,   nil,   nil,   nil,   nil,
   -30,   -13,   -16,   -25 ]

racc_goto_default = [
   nil,    23,   nil,   nil,     6,     7,     8,     9,    10,    11,
   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  4, 16, :_reduce_1,
  4, 16, :_reduce_2,
  4, 16, :_reduce_3,
  1, 16, :_reduce_none,
  1, 16, :_reduce_none,
  1, 16, :_reduce_none,
  1, 16, :_reduce_none,
  1, 16, :_reduce_none,
  1, 16, :_reduce_none,
  1, 16, :_reduce_none,
  1, 16, :_reduce_none,
  1, 16, :_reduce_none,
  1, 17, :_reduce_13,
  2, 17, :_reduce_14,
  0, 18, :_reduce_15,
  1, 18, :_reduce_none,
  5, 19, :_reduce_17,
  8, 20, :_reduce_18,
  0, 25, :_reduce_19,
  2, 25, :_reduce_20,
  4, 21, :_reduce_21,
  1, 26, :_reduce_22,
  2, 26, :_reduce_23,
  4, 27, :_reduce_24,
  4, 27, :_reduce_25,
  6, 22, :_reduce_26,
  7, 23, :_reduce_27,
  7, 24, :_reduce_28,
  0, 28, :_reduce_29,
  5, 28, :_reduce_30 ]

racc_reduce_n = 31

racc_shift_n = 70

racc_token_table = {
  false => 0,
  :error => 1,
  "(" => 2,
  :KW_AND => 3,
  ")" => 4,
  :KW_OR => 5,
  :IDENT => 6,
  :NUMBER => 7,
  :STRING => 8,
  :KW_DEFINE => 9,
  :KW_COND => 10,
  :KW_ELSE => 11,
  :KW_IF => 12,
  :KW_LAMBDA => 13,
  :KW_LET => 14 }

racc_nt_base = 15

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"(\"",
  "KW_AND",
  "\")\"",
  "KW_OR",
  "IDENT",
  "NUMBER",
  "STRING",
  "KW_DEFINE",
  "KW_COND",
  "KW_ELSE",
  "KW_IF",
  "KW_LAMBDA",
  "KW_LET",
  "$start",
  "expr",
  "seq",
  "opt_seq",
  "define",
  "define_proc",
  "cond",
  "if",
  "lambda",
  "let",
  "params",
  "clauses",
  "clause",
  "defs" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 6)
  def _reduce_1(val, _values)
                [:and, *val[2]]
          
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 10)
  def _reduce_2(val, _values)
                [:or, *val[2]]
          
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 14)
  def _reduce_3(val, _values)
                [val[1], *val[2]]
          
  end
.,.,

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

module_eval(<<'.,.,', 'parser.y', 28)
  def _reduce_13(val, _values)
                  [val[0]]
            
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 32)
  def _reduce_14(val, _values)
                  val[0].push(val[1])
            
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 37)
  def _reduce_15(val, _values)
                  []
            
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'parser.y', 44)
  def _reduce_17(val, _values)
                  [:define, val[2], val[3]]
            
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 50)
  def _reduce_18(val, _values)
                      [:define_proc, [val[3], *val[4]], *val[6]]
                
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 55)
  def _reduce_19(val, _values)
                      []
                
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 59)
  def _reduce_20(val, _values)
                      val[0].push(val[1])
                
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 65)
  def _reduce_21(val, _values)
                  [:cond, *val[2]]
            
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 70)
  def _reduce_22(val, _values)
                  [val[0]]
            
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 74)
  def _reduce_23(val, _values)
                  val[0].push(val[1])
            
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 79)
  def _reduce_24(val, _values)
                  [val[1], val[2]]
            
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 83)
  def _reduce_25(val, _values)
                  [:else, val[2]]
            
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 89)
  def _reduce_26(val, _values)
              [:if, val[2], val[3], val[4]]
        
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 95)
  def _reduce_27(val, _values)
                  [:lambda, val[3], *val[5]]
            
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 101)
  def _reduce_28(val, _values)
                [:let, val[3], *val[5]]
          
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 105)
  def _reduce_29(val, _values)
                []
          
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 109)
  def _reduce_30(val, _values)
                val[0].push([val[2], val[3]])
          
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

end   # class Parser

end # of module Rubic
