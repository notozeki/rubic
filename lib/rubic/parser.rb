#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'strscan'

module Rubic
  class UnknownCharacterError < StandardError; end

class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 95)
EOT = [false, nil] # end of token
SYM_CHARS = Regexp.escape("+-*/<>=")

def parse(str)
  @s = StringScanner.new(str)
  do_parse
end

def next_token
  @s.skip(/\s+/)
  return EOT if @s.eos?

  case
  when @s.scan(/[0-9]+(\.[0-9]+)?/)
    [:NUMBER, @s[0].include?('.') ? @s[0].to_f : @s[0].to_i]
  when @s.scan(/[\(\)]/o)
    [@s[0], nil]
  when @s.scan(/[A-Za-z_#{SYM_CHARS}][A-Za-z0-9_#{SYM_CHARS}]*/o)
    case @s[0] # keyword check
    when 'define'
      [:KW_DEFINE, nil]
    when 'cond'
      [:KW_COND, nil]
    when 'else'
      [:KW_ELSE, nil]
    when 'if'
      [:KW_IF, nil]
    when 'and'
      [:KW_AND, nil]
    when 'or'
      [:KW_OR, nil]
    else
      [:IDENT, @s[0]]
    end
  else
    raise UnknownCharacterError, "unknown character #{@s.getch}"
  end
end

...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    18,    45,    24,    46,     8,     9,    23,    11,    38,    12,
    13,    17,    14,    15,    18,    16,    18,    40,     8,     9,
     8,     9,    18,    27,    18,    35,     8,     9,     8,     9,
    18,    27,     7,    34,     8,     9,     8,     9,    18,    47,
    18,    48,     8,     9,     8,     9,    18,    49,    10,    51,
     8,     9,    18,   nil,    29,   nil,     8,     9,    18,   nil,
    31,   nil,     8,     9,    18,   nil,    32,     7,     8,     9,
    18,     8,     9,   nil,     8,     9,    11,   nil,    12,    13 ]

racc_action_check = [
    27,    41,    14,    41,    27,    27,    14,     7,    27,     7,
     7,    10,     7,     7,    38,     7,    39,    33,    38,    38,
    39,    39,    11,    25,    12,    25,    11,    11,    12,    12,
    13,    15,    45,    24,    13,    13,    45,    45,    37,    42,
    16,    43,    37,    37,    16,    16,    28,    44,     1,    50,
    28,    28,    19,   nil,    19,   nil,    19,    19,    21,   nil,
    21,   nil,    21,    21,    22,   nil,    22,     0,    22,    22,
    23,     0,     0,   nil,    23,    23,    18,   nil,    18,    18 ]

racc_action_pointer = [
    65,    48,   nil,   nil,   nil,   nil,   nil,     4,   nil,   nil,
    11,    20,    22,    28,     0,    29,    38,   nil,    73,    50,
   nil,    56,    62,    68,    27,    21,   nil,    -2,    44,   nil,
   nil,   nil,   nil,    13,   nil,   nil,   nil,    36,    12,    14,
   nil,    -3,    35,    37,    43,    30,   nil,   nil,   nil,   nil,
    45,   nil ]

racc_action_default = [
   -23,   -23,    -1,    -2,    -3,    -4,    -5,   -23,    -9,   -10,
   -23,   -23,   -23,   -23,   -23,   -23,   -23,    52,   -23,   -23,
   -11,   -23,   -23,   -23,   -23,   -23,   -18,   -23,   -23,    -6,
   -12,    -7,    -8,   -23,   -15,   -17,   -19,   -23,   -23,   -23,
   -13,   -23,   -23,   -23,   -23,   -23,   -16,   -20,   -21,   -22,
   -23,   -14 ]

racc_goto_table = [
     1,     2,    26,    19,    21,    22,    25,    41,   nil,   nil,
   nil,   nil,    36,   nil,   nil,   nil,   nil,    28,   nil,   nil,
    30,   nil,    30,    30,    33,   nil,   nil,   nil,    37,    39,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    42,    43,
    44,   nil,   nil,   nil,   nil,    50,     2 ]

racc_goto_check = [
     1,     2,    10,     7,     7,     7,     9,     8,   nil,   nil,
   nil,   nil,    10,   nil,   nil,   nil,   nil,     2,   nil,   nil,
     2,   nil,     2,     2,     2,   nil,   nil,   nil,     2,     2,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,     2,
     2,   nil,   nil,   nil,   nil,     1,     2 ]

racc_goto_pointer = [
   nil,     0,     1,   nil,   nil,   nil,   nil,    -8,   -27,    -9,
   -13 ]

racc_goto_default = [
   nil,   nil,    20,     3,     4,     5,     6,   nil,   nil,   nil,
   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 13, :_reduce_none,
  1, 13, :_reduce_none,
  1, 13, :_reduce_none,
  1, 13, :_reduce_none,
  1, 13, :_reduce_none,
  4, 14, :_reduce_6,
  4, 14, :_reduce_7,
  4, 14, :_reduce_8,
  1, 14, :_reduce_none,
  1, 14, :_reduce_none,
  1, 19, :_reduce_11,
  2, 19, :_reduce_12,
  5, 15, :_reduce_13,
  8, 16, :_reduce_14,
  0, 20, :_reduce_15,
  2, 20, :_reduce_16,
  4, 17, :_reduce_17,
  1, 21, :_reduce_18,
  2, 21, :_reduce_19,
  4, 22, :_reduce_20,
  4, 22, :_reduce_21,
  6, 18, :_reduce_22 ]

racc_reduce_n = 23

racc_shift_n = 52

racc_token_table = {
  false => 0,
  :error => 1,
  "(" => 2,
  :KW_AND => 3,
  ")" => 4,
  :KW_OR => 5,
  :IDENT => 6,
  :NUMBER => 7,
  :KW_DEFINE => 8,
  :KW_COND => 9,
  :KW_ELSE => 10,
  :KW_IF => 11 }

racc_nt_base = 12

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"(\"",
  "KW_AND",
  "\")\"",
  "KW_OR",
  "IDENT",
  "NUMBER",
  "KW_DEFINE",
  "KW_COND",
  "KW_ELSE",
  "KW_IF",
  "$start",
  "stmt",
  "expr",
  "define",
  "define_proc",
  "cond",
  "if",
  "exprs",
  "params",
  "clauses",
  "clause" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.y', 13)
  def _reduce_6(val, _values)
                [:and, *val[2]]
          
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 17)
  def _reduce_7(val, _values)
                [:or, *val[2]]
          
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 21)
  def _reduce_8(val, _values)
                [val[1], *val[2]]
          
  end
.,.,

# reduce 9 omitted

# reduce 10 omitted

module_eval(<<'.,.,', 'parser.y', 28)
  def _reduce_11(val, _values)
                [val[0]]
          
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 32)
  def _reduce_12(val, _values)
                val[0].push(val[1])
          
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 38)
  def _reduce_13(val, _values)
                  [:define, val[2], val[3]]
            
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 44)
  def _reduce_14(val, _values)
                      [:define_proc, [val[3], *val[4]], val[6]]
                
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 49)
  def _reduce_15(val, _values)
                      []
                
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 53)
  def _reduce_16(val, _values)
                      val[0].push(val[1])
                
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 59)
  def _reduce_17(val, _values)
                    [:cond, *val[2]]
              
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 64)
  def _reduce_18(val, _values)
                  [val[0]]
            
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 68)
  def _reduce_19(val, _values)
                  val[0].push(val[1])
            
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 73)
  def _reduce_20(val, _values)
                  [val[1], val[2]]
            
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 77)
  def _reduce_21(val, _values)
                  [:else, val[2]]
            
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 83)
  def _reduce_22(val, _values)
              [:if, val[2], val[3], val[4]]
        
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

end   # class Parser

end # of module Rubic
