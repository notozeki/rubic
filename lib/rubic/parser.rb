#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'strscan'

module Rubic
  class UnknownCharacterError < StandardError; end

class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 42)
EOT = [false, nil] # end of token

def parse(str)
  @s = StringScanner.new(str)
  do_parse
end

def next_token
  @s.skip(/\s+/)
  return EOT if @s.eos?

  case
  when @s.scan(/[0-9]+(\.[0-9]+)?/)
    [:NUMBER, @s[0].include?('.') ? @s[0].to_f : @s[0].to_i]
  when @s.scan(/[#{Regexp.escape("()+-*/")}]/o)
    [@s[0], nil]
  else
    raise UnknownCharacterError, "unknown character #{@s.getch}"
  end
end

...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     3,     3,     3,    20,    19,    10,     4,     4,     4,     3,
     3,    18,     3,     5,     3,     4,     4,     3,     4,    16,
     4,     3,     6,     4,     7,     8,     9,     4 ]

racc_action_check = [
     0,    15,    14,    15,    14,     5,     0,    15,    14,    13,
     6,    13,     7,     1,     9,    13,     6,    11,     7,    11,
     9,     8,     3,    11,     3,     3,     3,     8 ]

racc_action_pointer = [
    -2,    13,   nil,    19,   nil,     5,     8,    10,    19,    12,
   nil,    15,   nil,     7,     0,    -1,   nil,   nil,   nil,   nil,
   nil ]

racc_action_default = [
    -9,    -9,    -1,    -9,    -6,    -9,    -9,    -9,    -9,    -9,
    21,    -9,    -7,    -9,    -9,    -9,    -2,    -8,    -3,    -4,
    -5 ]

racc_goto_table = [
     2,    11,    13,    14,    15,     1,   nil,   nil,   nil,   nil,
   nil,    17,   nil,    17,    17,    17 ]

racc_goto_check = [
     2,     3,     3,     3,     3,     1,   nil,   nil,   nil,   nil,
   nil,     2,   nil,     2,     2,     2 ]

racc_goto_pointer = [
   nil,     5,     0,    -5 ]

racc_goto_default = [
   nil,   nil,    12,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 10, :_reduce_none,
  4, 11, :_reduce_2,
  4, 11, :_reduce_3,
  4, 11, :_reduce_4,
  4, 11, :_reduce_5,
  1, 11, :_reduce_none,
  1, 12, :_reduce_7,
  2, 12, :_reduce_8 ]

racc_reduce_n = 9

racc_shift_n = 21

racc_token_table = {
  false => 0,
  :error => 1,
  "(" => 2,
  "+" => 3,
  ")" => 4,
  "-" => 5,
  "*" => 6,
  "/" => 7,
  :NUMBER => 8 }

racc_nt_base = 9

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"(\"",
  "\"+\"",
  "\")\"",
  "\"-\"",
  "\"*\"",
  "\"/\"",
  "NUMBER",
  "$start",
  "target",
  "expr",
  "exprs" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'parser.y', 8)
  def _reduce_2(val, _values)
                  val[2].reduce(&:+)
            
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 12)
  def _reduce_3(val, _values)
                  val[2].reduce(&:-)
            
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 16)
  def _reduce_4(val, _values)
                  val[2].reduce(&:*)
            
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 20)
  def _reduce_5(val, _values)
                  val[2].reduce(&:'/')
            
  end
.,.,

# reduce 6 omitted

module_eval(<<'.,.,', 'parser.y', 26)
  def _reduce_7(val, _values)
                  [val[0]]
            
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 30)
  def _reduce_8(val, _values)
                  val[0].push(val[1])
            
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

end   # class Parser

end # of module Rubic
