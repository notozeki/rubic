#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'strscan'

module Rubic
  class UnknownCharacterError < StandardError; end

class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 92)
EOT = [false, nil] # end of token
SYM_CHARS = Regexp.escape("+-*/<>=?")

def parse(str)
  @s = StringScanner.new(str)
  do_parse
end

def next_token
  @s.skip(/\s+/)
  return EOT if @s.eos?

  case
  when @s.scan(/[0-9]+(\.[0-9]+)?/)
    [:NUMBER, @s[0].include?('.') ? @s[0].to_f : @s[0].to_i]
  when @s.scan(/[\(\)]/o)
    [@s[0], nil]
  when @s.scan(/[A-Za-z_#{SYM_CHARS}][A-Za-z0-9_#{SYM_CHARS}]*/o)
    case @s[0] # keyword check
    when 'define'
      [:KW_DEFINE, nil]
    when 'cond'
      [:KW_COND, nil]
    when 'else'
      [:KW_ELSE, nil]
    when 'if'
      [:KW_IF, nil]
    when 'and'
      [:KW_AND, nil]
    when 'or'
      [:KW_OR, nil]
    else
      [:IDENT, @s[0]]
    end
  else
    raise UnknownCharacterError, "unknown character #{@s.getch}"
  end
end

...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     2,    10,    25,    11,     3,     4,    13,    14,     2,    15,
     2,    16,     3,     4,     3,     4,    36,     2,    25,     2,
    33,     3,     4,     3,     4,     2,    43,     2,    44,     3,
     4,     3,     4,     2,    38,     2,    45,     3,     4,     3,
     4,     2,    46,    47,    22,     3,     4,     2,    21,    27,
     9,     3,     4,     2,    32,    29,   nil,     3,     4,     2,
   nil,    30,     2,     3,     4,     2,     3,     4,     2,     3,
     4,   nil,     3,     4,     2,   nil,    49,   nil,     3,     4 ]

racc_action_check = [
     2,     2,    14,     2,     2,     2,     2,     2,    25,     2,
    35,     9,    25,    25,    35,    35,    25,    37,    23,    10,
    23,    37,    37,    10,    10,    11,    39,    12,    39,    11,
    11,    12,    12,    36,    31,     0,    40,    36,    36,     0,
     0,    15,    41,    42,    13,    15,    15,    17,    13,    17,
     1,    17,    17,    19,    22,    19,   nil,    19,    19,    20,
   nil,    20,    21,    20,    20,    43,    21,    21,    26,    43,
    43,   nil,    26,    26,    48,   nil,    48,   nil,    48,    48 ]

racc_action_pointer = [
    33,    50,    -2,   nil,   nil,   nil,   nil,   nil,   nil,    11,
    17,    23,    25,    42,     0,    39,   nil,    45,   nil,    51,
    57,    60,    48,    16,   nil,     6,    66,   nil,   nil,   nil,
   nil,    30,   nil,   nil,   nil,     8,    31,    15,   nil,    22,
    32,    38,    39,    63,   nil,   nil,   nil,   nil,    72,   nil ]

racc_action_default = [
   -22,   -22,   -22,    -4,    -5,    -6,    -7,    -8,    -9,   -22,
   -22,   -22,   -22,   -22,   -22,   -22,    50,   -22,   -10,   -22,
   -22,   -22,   -22,   -22,   -17,   -22,   -22,    -1,   -11,    -2,
    -3,   -22,   -14,   -16,   -18,   -22,   -22,   -22,   -12,   -22,
   -22,   -22,   -22,   -22,   -15,   -19,   -20,   -21,   -22,   -13 ]

racc_goto_table = [
     1,    24,    12,    23,    39,    17,    19,    20,   nil,   nil,
    34,   nil,   nil,   nil,   nil,    26,   nil,    28,   nil,    28,
    28,    31,   nil,   nil,   nil,    35,    37,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    40,    41,    42,    48,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    28 ]

racc_goto_check = [
     1,     9,     1,     8,     7,     2,     2,     2,   nil,   nil,
     9,   nil,   nil,   nil,   nil,     1,   nil,     1,   nil,     1,
     1,     1,   nil,   nil,   nil,     1,     1,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     1,     1,     1,     2,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     1 ]

racc_goto_pointer = [
   nil,     0,    -5,   nil,   nil,   nil,   nil,   -28,   -11,   -13 ]

racc_goto_default = [
   nil,    18,   nil,     5,     6,     7,     8,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  4, 13, :_reduce_1,
  4, 13, :_reduce_2,
  4, 13, :_reduce_3,
  1, 13, :_reduce_none,
  1, 13, :_reduce_none,
  1, 13, :_reduce_none,
  1, 13, :_reduce_none,
  1, 13, :_reduce_none,
  1, 13, :_reduce_none,
  1, 14, :_reduce_10,
  2, 14, :_reduce_11,
  5, 15, :_reduce_12,
  8, 16, :_reduce_13,
  0, 19, :_reduce_14,
  2, 19, :_reduce_15,
  4, 17, :_reduce_16,
  1, 20, :_reduce_17,
  2, 20, :_reduce_18,
  4, 21, :_reduce_19,
  4, 21, :_reduce_20,
  6, 18, :_reduce_21 ]

racc_reduce_n = 22

racc_shift_n = 50

racc_token_table = {
  false => 0,
  :error => 1,
  "(" => 2,
  :KW_AND => 3,
  ")" => 4,
  :KW_OR => 5,
  :IDENT => 6,
  :NUMBER => 7,
  :KW_DEFINE => 8,
  :KW_COND => 9,
  :KW_ELSE => 10,
  :KW_IF => 11 }

racc_nt_base = 12

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"(\"",
  "KW_AND",
  "\")\"",
  "KW_OR",
  "IDENT",
  "NUMBER",
  "KW_DEFINE",
  "KW_COND",
  "KW_ELSE",
  "KW_IF",
  "$start",
  "expr",
  "seq",
  "define",
  "define_proc",
  "cond",
  "if",
  "params",
  "clauses",
  "clause" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 6)
  def _reduce_1(val, _values)
                [:and, *val[2]]
          
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 10)
  def _reduce_2(val, _values)
                [:or, *val[2]]
          
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 14)
  def _reduce_3(val, _values)
                [val[1], *val[2]]
          
  end
.,.,

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

module_eval(<<'.,.,', 'parser.y', 25)
  def _reduce_10(val, _values)
                [val[0]]
          
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 29)
  def _reduce_11(val, _values)
                val[0].push(val[1])
          
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 35)
  def _reduce_12(val, _values)
                  [:define, val[2], val[3]]
            
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 41)
  def _reduce_13(val, _values)
                      [:define_proc, [val[3], *val[4]], *val[6]]
                
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 46)
  def _reduce_14(val, _values)
                      []
                
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 50)
  def _reduce_15(val, _values)
                      val[0].push(val[1])
                
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 56)
  def _reduce_16(val, _values)
                  [:cond, *val[2]]
            
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 61)
  def _reduce_17(val, _values)
                  [val[0]]
            
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 65)
  def _reduce_18(val, _values)
                  val[0].push(val[1])
            
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 70)
  def _reduce_19(val, _values)
                  [val[1], val[2]]
            
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 74)
  def _reduce_20(val, _values)
                  [:else, val[2]]
            
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 80)
  def _reduce_21(val, _values)
              [:if, val[2], val[3], val[4]]
        
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

end   # class Parser

end # of module Rubic
